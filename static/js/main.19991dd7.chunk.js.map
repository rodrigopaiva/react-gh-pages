{"version":3,"sources":["images/book.svg","images/chart.svg","images/gear.svg","images/play.svg","images/stack.svg","images/emoji-happy.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","state","items","dataRoute","className","id","src","iconStack","alt","iconBook","iconChart","iconPlay","iconGear","iconHappy","fetch","this","then","res","json","setState","prevState","map","mapitem","item","image","acf_fields","name","title","rendered","link","description","category","type","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6GAAAA,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,kSCiF5BC,G,kBArEb,WAAYC,GAAO,IAAD,8BAChB,4CAAMA,KAEDC,MAAQ,CACXC,MAAO,GACPC,UAAW,uEALG,E,sEAahB,OAEE,yBAAKC,UAAU,OAEb,yBAAKA,UAAU,8CACb,yBAAKA,UAAU,mBACb,4BACE,wBAAIA,UAAU,aAAaC,GAAG,iBAC5B,yBAAKC,IAAKC,IAAWC,IAAI,eAD3B,UAGA,wBAAIH,GAAG,aACL,yBAAKC,IAAKG,IAAUD,IAAI,cAD1B,YAGA,wBAAIH,GAAG,aACL,yBAAKC,IAAKI,IAAWF,IAAI,eAD3B,oBAGA,wBAAIH,GAAG,eACL,yBAAKC,IAAKK,IAAUH,IAAI,cAD1B,YAGA,wBAAIH,GAAG,YACL,yBAAKC,IAAKM,IAAUJ,IAAI,cAD1B,iBAKF,mDACsB,yBAAKF,IAAMO,IAAYL,IAAI,qB,0CAUvC,IAAD,OACjBM,MAAMC,KAAKd,MAAME,WACda,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAd,GAAK,OAAI,EAAKiB,UAAS,SAACC,EAAWpB,GACvC,MAAO,CAAEE,MAAOA,EAAMmB,IAAI,EAAKC,kB,8BAK7BC,GACN,MAAO,CACLlB,GAAIkB,EAAKlB,GACTmB,MAAOD,EAAKE,WAAWD,MACvBE,KAAMH,EAAKI,MAAMC,SACjBC,KAAMN,EAAKM,KACXC,YAAaP,EAAKE,WAAWK,YAC7BC,SAAUR,EAAKE,WAAWO,U,GAlEdC,cCEEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7B,MAAK,SAAA8B,GACjCA,EAAaC,kB","file":"static/js/main.19991dd7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/book.d54a3b09.svg\";","module.exports = __webpack_public_path__ + \"static/media/chart.4b94e9e6.svg\";","module.exports = __webpack_public_path__ + \"static/media/gear.999c3085.svg\";","module.exports = __webpack_public_path__ + \"static/media/play.256114b4.svg\";","module.exports = __webpack_public_path__ + \"static/media/stack.f76fa13c.svg\";","module.exports = __webpack_public_path__ + \"static/media/emoji-happy.3ff76f0b.png\";","import React, { Component } from 'react';\nimport iconBook from './images/book.svg';\nimport iconChart from './images/chart.svg';\nimport iconGear from './images/gear.svg';\nimport iconPlay from './images/play.svg';\n// import iconPlus from './images/plus.svg';\nimport iconStack from './images/stack.svg';\nimport iconHappy from './images/emoji-happy.png';\nimport './css/App.css';\n\nclass App extends Component {\n\n  constructor(props){\n    super(props);\n\n    this.state = {\n      items: [],\n      dataRoute: 'http://rodrigofelipe.com.br/testes/wp-headless/wp-json/wp/v2/posts/'\n    };\n  }\n\n\n\n  render() {\n\n    return (\n\n      <div className=\"app\">\n\n        <nav className=\"nav-primary animated bounceInDown delay-2s\">\n          <div className=\"aux center w-90\">\n            <ul>\n              <li className=\"nav-active\" id=\"nav-all-items\">\n                <img src={iconStack} alt=\"icon-stack\" /> todos\n              </li>\n              <li id=\"nav-books\">\n                <img src={iconBook} alt=\"icon-book\" /> e-books\n              </li>\n              <li id=\"nav-chart\">\n                <img src={iconChart} alt=\"icon-chart\" /> infogr√°ficos\n              </li>\n              <li id=\"nav-webinar\">\n                <img src={iconPlay} alt=\"icon-play\" /> webinar\n              </li>\n              <li id=\"nav-gear\">\n                <img src={iconGear} alt=\"icon-gear\" /> ferramentas\n              </li>\n            </ul>\n\n            <h1>\n              Materiais gratuitos <img src={ iconHappy } alt=\"icon-happy\" />\n            </h1>\n          </div>\n        </nav>\n\n      </div>\n    );\n  }\n\n\n  componentDidMount(){\n    fetch(this.state.dataRoute)\n      .then(res => res.json())\n      .then(items => this.setState((prevState, props) => {\n        return { items: items.map(this.mapitem)};\n      }));\n  }\n\n\n  mapitem(item){\n    return {\n      id: item.id,\n      image: item.acf_fields.image,\n      name: item.title.rendered,\n      link: item.link,\n      description: item.acf_fields.description,\n      category: item.acf_fields.type\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}